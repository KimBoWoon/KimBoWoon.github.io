<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[[Effective Java] public 클래스 안에는 public 필드를 두지 말고 접근자 메소드를 사용하라]]></title>
      <url>/effective%20java/2017/12/19/geter-seter/</url>
      <content type="html"><![CDATA[<h1 id="접근자-메소드">접근자 메소드</h1>
<p>어느 클래스는 필드만 가지고 있는 클래스가 있다. 이 클래스에는 접근자 메소드가 있어야 여러모로 좋다. 캡슐화의 이점을 누릴 수 없고 API를 변경하지 않고서는 내부 표현을 변경할 수도 없다. 또한 불변식도 강제할 수 없고, 필드를 사용하는 순간에 어떤 종작이 실행되록 만들 수도 없다. 그래서 다음과 같이 접근자 메소드를 가져야한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kt">double</span> <span class="n">x</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">y</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">,</span> <span class="kt">double</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
    	<span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nf">getX</span><span class="o">()</span> <span class="o">{</span>
    	<span class="k">return</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nf">getY</span><span class="o">()</span> <span class="o">{</span>
    	<span class="k">return</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nf">setX</span><span class="o">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    	<span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nf">setY</span><span class="o">(</span><span class="kt">double</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
    	<span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 만들어야 클래스 내부표현을 자유로이 수정할 수 있게 된다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] 클래스와 멤버의 접근 권한은 최소화하라]]></title>
      <url>/effective%20java/2017/12/15/java-access/</url>
      <content type="html"><![CDATA[<h1 id="정보은닉과-캡슐화">정보은닉과 캡슐화</h1>
<p>잘 설계된 모듈과 그렇지 못한 모듈을 구별하는 방법 중에 하나는 모듈 내부의 데이터를 비롯한 여러 구현 세부사항을 다른 모듈에 잘 감추느냐의 여부다. 잘 설계된 모듈을 모두 API 뒤편으로 감춘다. 그리고 모듈은 API를 통해서만 서로 통신한다. 또한 내부적으로는 무슨 짓을 하는지는 신경 쓰지 않는다. 이 개념이 바로 정보은닉과 캡슐화이다. 정보은닉은 여러모로 중요하다. 대부분이 정보은닉이 시스템을 구성하는 모듈 사이의 의존성을 낮춰서 각자 개별적으로 개발하고 시험하고 최적화하고 이해하고 변경할 수 있도록 한다는 사실에 기초한다. 그렇게 되면 병렬적으로 개발할 수 있기 때문에 개발 속도가 올라간다. 이러한 장점을 지키위해서 행해야 하는것은 정말 간단하다. 각 클래스의 멤버는 가능한 한 접근 불가능하도록 만들면 된다.</p>

<h1 id="java-접근자">java 접근자</h1>
<ul>
  <li>private : 최상위 레벨 클래스 내부에서만 접근 가능</li>
  <li>package-private : 간은 패키지 내의 아무 클래스나 사용 가능, 기본 접근 권한으로 알려져 있다.</li>
  <li>protected : 해당하는 클래스와 이 클래스를 상속받은 클래스들 내에서 사용이 가능하다.</li>
  <li>public : 언제 어디서는 사용이 가능하다.</li>
</ul>

<p>public은 항상 조심해야한다. 스레드에도 안전하지 않고 누구나 접근이 가능해서 값이 변경되기 때문이다. 또한 길이가 0이 아닌 배열은 언제나 변경 가능하므로, public static final 배열 필드를 두거나, 배열 필드를 반환하는 접근자를 정의하면 안 된다. 클라이언트가 배열 내용을 변경할 수 있기 때문에 보안에 문제가 생긴다. 따라서 다음과 같이 사용하는게 좋다.</p>

<p>public으로 선언되었던 배열은 private로 바꾸고, 변경이 불가능한 puvlic 리스트를 하나 만드는 것이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Integer</span><span class="o">[]</span> <span class="n">PRIVATE_VALUES</span> <span class="o">=</span> <span class="o">{};</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">VALUES</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">PRIVATE_VALUES</span><span class="o">));</span>
</code></pre></div></div>

<p>배열은 private 으로 선언하고, 해당 배열을 복사해서 반환하는 public 메소드를 하나 추가하는 것이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Integer</span><span class="o">[]</span> <span class="n">PRIVATE_VALUES</span> <span class="o">=</span> <span class="o">{};</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Integer</span><span class="o">[]</span> <span class="nf">values</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">PRIVATE_VALUES</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>두 방법 가운데 하나를 택할 때는 클라이언트가 어떤 작업을 하길 원하는지 따져야 한다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] Comparable 구현을 고려하라]]></title>
      <url>/effective%20java/2017/12/14/comparable-implement/</url>
      <content type="html"><![CDATA[<h1 id="comparable">Comparable</h1>
<p>이 인터페이스는 다른 인터페이스와 달리 하나의 메소드를 가지고 있다. compareTo 메소들을 가지고 있는데 이 메소드는 Object 클래스에는 포함되어 있지 않으며 오직 Comparable만이 가지고 있다. Comparable을 구현하는 클래스의 객체들은 모두 자연적 순서를 가지고 있다. 또한 최대/최소치를 계산하기도 간단하며, 그 컬렉션을 정렬된 상태로 유지하도 쉽다. 그리고 다양한 제네릭 알고리즘 및 Comparable 인터페이스를 이용하도록 작성된 컬렉션 구현체와도 전부 연동할 수 있다.</p>

<h1 id="compareto-메소드의-일반-규약">compareTo 메소드의 일반 규약</h1>
<ul>
  <li>자신과 주어진 객체를 비교하는데 자신이 주어진 객체보다 작으면 음수를, 같으면 0, 크다면 양수를 반환한다. 만약 비교 불가능한 객체가 전달된다면 ClassCastException 예외를 던진다.</li>
  <li>모든 x와 y에 대해 x.compareTo(y) == y.compareTo(x)는 같아야 한다. 만약 예외를 던진다면 역도 반드시 그래야한다.</li>
  <li>compareTo를 구현할 때는 추이성이 만족되도록 해야한다. (x.compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0 이면 x.compareTo(z) &gt; 이어야한다.)</li>
  <li>x.compareTo(y) == 0 이면 x.compareTo(z) == y.compareTo(z)의 관계가 모든 z에 대해 성립해야한다.</li>
  <li>(x.compareTo(y) == 0) == x.equals(y) 이 규약은 강력히 추천하지만 절대적으로 요구되는 것이 아니다. 일반적으로, Compareable 인터페이스를 구현하면서 이 조건을 만족하지 않는 클래스는 반드시 그 사실을 명시해야한다.</li>
</ul>

<p>이 규약들은 모두 한 클래스 객체 사이에 자연적 순서가 존재하기만 하면 어떤 것이든 이 규약을 만족할 것이다.</p>

<h1 id="코드">코드</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComparablePractice</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Fruit</span><span class="o">[]</span> <span class="n">fruits</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Fruit</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>

        <span class="n">fruits</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Fruit</span><span class="o">(</span><span class="s">"사과"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
        <span class="n">fruits</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Fruit</span><span class="o">(</span><span class="s">"오렌지"</span><span class="o">,</span> <span class="mi">34</span><span class="o">);</span>
        <span class="n">fruits</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Fruit</span><span class="o">(</span><span class="s">"포도"</span><span class="o">,</span> <span class="mi">24</span><span class="o">);</span>
        <span class="n">fruits</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Fruit</span><span class="o">(</span><span class="s">"배"</span><span class="o">,</span> <span class="mi">19</span><span class="o">);</span>
        <span class="n">fruits</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Fruit</span><span class="o">(</span><span class="s">"키위"</span><span class="o">,</span> <span class="mi">37</span><span class="o">);</span>

        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">fruits</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fruits</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getName</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"----------------------------"</span><span class="o">);</span>

        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">fruits</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Fruit</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Fruit</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Fruit</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">o2</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">});</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fruits</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getName</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Fruit</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Fruit</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Fruit</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">price</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPrice</span><span class="o">(</span><span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Fruit</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>compareTo 메소드에서 사용자가 원하는 값을 기준으로 정렬해야한다.</li>
</ul>

<h1 id="comparable와-comparator-차이">Comparable와 Comparator 차이</h1>
<p>서로 같은일을 하는 인터페이스지만 왜 따로 존재하냐면 Comparable는 자기 자신과 다른 객체 하나를 비교하고 Comparator은 다른 두개의 객체를 비교한다. Comparator 인터페이스를 구현한 객체를 기준으로 다른 두개의 객체를 비교한다는 말이다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] clone을 재정의 할 때는 신중하라]]></title>
      <url>/effective%20java/2017/12/12/cloneable-implement/</url>
      <content type="html"><![CDATA[<h1 id="cloneable-interface">Cloneable Interface</h1>
<p>Cloneable은 어떤 객체가 복제를 허용한다는 사실을 알리는 데 쓰려고 만들어진 믹스인(mixin) 인터페이스다. 이 인터페이스는 아무런 추상 메소드들을 가지고 있지 않고 오직 Object 클래스의 clone을 사용할것인지 여부를 결정하기만 한다. clone 메소드를 호출하면 해당하는 객체의 복사본을 만들어낸다. 또한 원본객체와 같은 필드값을 가지며 필드의 값도 복사된다. 이 인터페이스를 implement를 하지않고 clone메소드를 호출하면 CloneNotSupportedException을 뱉어낸다.</p>

<h1 id="clone-메소드의-일반-규약">clone 메소드의 일반 규약</h1>
<ul>
  <li>x.clone() != x</li>
  <li>x.clone().getClass() == x.getClass()</li>
  <li>x.clone.equals(x)</li>
</ul>

<p>이 규약들은 참이여야 하지만 꼭 그렇지만도 않다.</p>

<h1 id="clone-override">clone override</h1>
<p>final이 아닌 슈퍼 클래스를 오버라이딩할 경우 반드시 서브 클래스에서 super.clone()을 호출하여 얻은 객체를 반환하야 한다. 그리고 해당하는 객체를 복사할 때 레퍼런스 타입을 가지고 있는 경우에는 레퍼런스 타입에도 clone 메소드를 호출해야한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Stack</span> <span class="kd">implements</span> <span class="n">Cloneable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Stack</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">DEFAULT_INITIAL_CAPACITY</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">Object</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ensureCapacity</span><span class="o">();</span>
        <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">++]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">EmptyStackException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
        <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">ensureCapacity</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">elements</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Stack</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Stack</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">Stack</span><span class="o">)</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
            <span class="n">result</span><span class="o">.</span><span class="na">elements</span> <span class="o">=</span> <span class="n">elements</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
            <span class="k">return</span>  <span class="n">result</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>clone 메소드에서 super를 사용해서 얻어온 객체는 형변환을 해서 넣지만 elements는 clone 메소드을 호출한 결과 그대로 넣고있다. 릴리즈 1.5부터는 배열에 clone을 호출하면 반환되는 배열의 컴파일 시점 자료형은 복제 대상 배열의 자료형과 같기 때문이다.</li>
  <li>clone 메소드는 동기화를 지원하지 않는다. 원한다면 따로 구현야해할 것이다.</li>
  <li>clone 을 사용해 꼭 모두 복사할 필요가 없다. 다른 값을 가지고 싶은 필드가 있다면 clone 메소드에서 따로 설정하는게 좋다.</li>
  <li>clone의 아키텍처는 변경 가능한 객체를 참조하는 final 필드의 일반적 용법과 호환되지 않는다. 따라서 final 선언을 지워야 할 수도 있다.</li>
  <li>깊은 복사를 진행할 때 재귀보다는 loop를 사용하는게 좋다. Stack Overflow가 발생할 수 있기 때문이다.</li>
  <li>Cloneable 인터페이스를 구현하는 클래스는 제대로 동작하는 public clone 메소드를 제공해야한다.</li>
</ul>

<p>사실 clone 메소드를 많이 사용하지 않는다. 굳이 사용해야 한다면 제대로 구현해야할 것이다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[pattern] Strategy Pattern]]></title>
      <url>/pattern/2017/12/11/strategy-pattern/</url>
      <content type="html"><![CDATA[<h1 id="strategy-pattern">Strategy Pattern</h1>
<p>필요한 알고리즘을 캡슐화 시켜서 상황에 맞게 사용하는 방법</p>

<h1 id="코드">코드</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StrategyPatternPractice</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Tiger</span> <span class="n">tiger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tiger</span><span class="o">(</span><span class="s">"Tiger"</span><span class="o">,</span> <span class="k">new</span> <span class="n">Walk</span><span class="o">());</span>
        <span class="n">Bird</span> <span class="n">bird</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bird</span><span class="o">(</span><span class="s">"Bird"</span><span class="o">,</span> <span class="k">new</span> <span class="n">Fly</span><span class="o">());</span>

        <span class="n">tiger</span><span class="o">.</span><span class="na">doMove</span><span class="o">();</span>
        <span class="n">bird</span><span class="o">.</span><span class="na">doMove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>알고리즘 인스턴스를 만들어 생성자로 넘겨준다</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Move</span> <span class="o">{</span>
    <span class="n">String</span> <span class="nf">move</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>캡슐화 알고리즘을 만들기 위해 인터페이스를 정의</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Fly</span> <span class="kd">implements</span> <span class="n">Move</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Fly"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Walk</span> <span class="kd">implements</span> <span class="n">Move</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Walk"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>인터페이스를 상속 받아 각각의 알고리즘을 구현한다</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Tiger</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Move</span> <span class="n">move</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Tiger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Move</span> <span class="n">move</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">move</span> <span class="o">=</span> <span class="n">move</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doMove</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">move</span><span class="o">.</span><span class="na">move</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Bird</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Move</span> <span class="n">move</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Bird</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Move</span> <span class="n">move</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">move</span> <span class="o">=</span> <span class="n">move</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doMove</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">move</span><span class="o">.</span><span class="na">move</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>해당하는 클래스 마다 생성자에서 인터페이스로 캐스팅시켜서 할당한다</li>
</ul>
]]></content>
      <categories>
        
          <category> Pattern </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[pattern] Adapter Pattern]]></title>
      <url>/pattern/2017/12/09/adapter-pattern/</url>
      <content type="html"><![CDATA[<h1 id="adapter-pattern">Adapter Pattern</h1>
<p>약간의 차이가 있는 클래스들을 인터페이스를 통해 똑같은 기능으로 사용하는 방법</p>

<h1 id="코드">코드</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">MyEngine</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyEngine</span><span class="o">();</span>

    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">printAll</span><span class="o">();</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">printAll</span><span class="o">();</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">printAll</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">AEngine</span> <span class="n">aEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AEngine</span><span class="o">();</span>

    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">engine</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">engine</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">engine</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">engine</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">engine</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">engine</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>기존에 사용하던 엔진에서 다른 엔진을 사용하려면 그에 맞게 코드를 수정할 필요가 있을것이다.</li>
  <li>
    <p>이대로라면 유지보수가 불편해질것이다.</p>
  </li>
  <li>그래서 다음과 같이 인터페이스를 만들고 그것을 구현한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">EngineInterface</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printAll</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">data</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">AdapterEngine</span> <span class="kd">implements</span> <span class="n">EngineInterface</span> <span class="o">{</span>
    <span class="n">AEngine</span> <span class="n">engine</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AdapterEngine</span><span class="o">(</span><span class="n">AEngine</span> <span class="n">engine</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">engine</span> <span class="o">=</span> <span class="n">engine</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">engine</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">engine</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">engine</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">engine</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">engine</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>
    <p>두 클래스가 제공하는 모든 기능이 들어있음을 알 수 있다.</p>
  </li>
  <li>
    <p>결과적으론 다음과 같이 변경되지 않은 코드를 사용할 수 있다.</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">AEngine</span> <span class="n">aEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AEngine</span><span class="o">();</span>
    <span class="n">EngineInterface</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdapterEngine</span><span class="o">(</span><span class="n">aEngine</span><span class="o">);</span>

    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">printAll</span><span class="o">();</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">printAll</span><span class="o">();</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">engine</span><span class="o">.</span><span class="na">printAll</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Pattern </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[pattern] Iterator Pattern]]></title>
      <url>/pattern/2017/12/08/iterator-pattern/</url>
      <content type="html"><![CDATA[<h1 id="iterator-pattern">Iterator Pattern</h1>
<p>for나 while를 대신하여 사용할 수 있는 도구</p>

<h1 id="코드">코드</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IteratorPattern</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">integers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">integers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">integers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="n">integers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
        <span class="n">integers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>

        <span class="n">Iterator</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">integers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>여기서 for나 while를 사용할 수 있지만 iterator를 사용하는 이유는 유지보수가 편하고, 만약 컬렉션이나 다른 클래스를 사용한다 하여도 반복문은 바뀌지 않기 때문입니다.</li>
</ul>
]]></content>
      <categories>
        
          <category> Pattern </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[pattern] Factory Pattern]]></title>
      <url>/pattern/2017/12/07/factory-pattern/</url>
      <content type="html"><![CDATA[<h1 id="factory-pattern">Factory Pattern</h1>
<p>클래스의 생성을 다른 클래스의에 위임하는 것</p>

<h1 id="코드">코드</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FactoryPatternPractice</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Book</span> <span class="n">mathBook</span> <span class="o">=</span> <span class="n">FactoryPattern</span><span class="o">.</span><span class="na">createClass</span><span class="o">(</span><span class="s">"math"</span><span class="o">);</span>
        <span class="n">Book</span> <span class="n">historyBook</span> <span class="o">=</span> <span class="n">FactoryPattern</span><span class="o">.</span><span class="na">createClass</span><span class="o">(</span><span class="s">"history"</span><span class="o">);</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mathBook</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">historyBook</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">Book</span> <span class="o">{</span>
    <span class="n">String</span> <span class="nf">getName</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">MathBook</span> <span class="kd">implements</span> <span class="n">Book</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"MathBook"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">HistoryBook</span> <span class="kd">implements</span> <span class="n">Book</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"HistoryBook"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">FactoryPattern</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Book</span> <span class="nf">createClass</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">switch</span> <span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="s">"math"</span><span class="o">:</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">MathBook</span><span class="o">();</span>
            <span class="k">case</span> <span class="s">"history"</span><span class="o">:</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">HistoryBook</span><span class="o">();</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="장단점">장단점</h1>
<ul>
  <li>객체 생성 코드를 전부 한 객체 또는 메소드에 집어넣으면 코드에 중복되는 내용을 제거할 수 있다.</li>
  <li>유지보수에도 편하다.</li>
  <li>인터페이스 바탕으로 프로그래밍을 할 수 있다.</li>
  <li>생성할 객체의 종류가 달라질 때마다 새로운 클래스를 만들어야 한다. 이것은 불 필요하게 많은 클래스를 만들어낼 수 있다.</li>
</ul>
]]></content>
      <categories>
        
          <category> Pattern </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[pattern] Singleton Pattern 잘쓰기]]></title>
      <url>/pattern/2017/12/06/singleton-pattern/</url>
      <content type="html"><![CDATA[<h1 id="eager-initialization">Eager Initialization</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">EagerInitialization</span> <span class="o">{</span>
    <span class="c1">// private static 로 선언.</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">EagerInitialization</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EagerInitialization</span><span class="o">();</span>

    <span class="c1">// 생성자</span>
    <span class="kd">private</span> <span class="nf">EagerInitialization</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"call EagerInitialization constructor."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 조회 method</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">EagerInitialization</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"It's print() method in EagerInitialization instance."</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"instance hashCode &gt; "</span> <span class="o">+</span> <span class="n">instance</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>private 접근제어자 때문에 이 인스턴스를 접근해서 사용하려면 getInstance() 메소드를 사용해야한다.</li>
  <li>다른 클래스들이 이 클래스를 많이 사용하면 아마도 클래스가 로드되는 시점에서 인스턴스를 생성시키는데 무리가 있을 수 있다.</li>
  <li>이 클래스의 인스턴스를 만들어 주는 과정에서 어떠한 예외 처리도 할 수 없다.</li>
</ul>

<h1 id="static-block-initialization">Static Block Initialization</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">StaticBlockInitialization</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">StaticBlockInitialization</span> <span class="n">instance</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nf">StaticBlockInitialization</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"instance create.."</span><span class="o">);</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StaticBlockInitialization</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"Exception creating StaticBlockInitialization instance."</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">StaticBlockInitialization</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"It's print() method in StaticBlockInitialization instance."</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"instance hashCode &gt; "</span> <span class="o">+</span> <span class="n">instance</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>static 초기화블럭을 이용하면 클래스가 로딩 될 때 최초 한번 실행하게 된다.</li>
  <li>초기화블럭을 이용하면 logic을 담을 수 있기 때문에 복잡한 초기변수 셋팅이나 위와 같이 에러처리를 위한 구문을 담을 수 있다.</li>
  <li>인스턴스가 사용되는 시점에 생성되는 것은 아니다.</li>
</ul>

<h1 id="lazy-initialization">lazy initialization</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">LazyInitialization</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="n">LazyInitialization</span> <span class="n">instance</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nf">LazyInitialization</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazyInitialization</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazyInitialization</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"It's print() method in LazyInitialization instance."</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"instance hashCode &gt; "</span> <span class="o">+</span> <span class="n">instance</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>new LazyInitialization(); 는 getInstance() method 안에서 사용되었다. if문을 이용해 instance가 null 인 경우에만 new를 사용해 객체를 생성한다.</li>
  <li>최초 사용시점에만 인스턴스화 시키기 때문에 프로그램이 메모리에 적재되는 시점에 부담이 많이 줄게된다.</li>
  <li>만약 프로그램이 muilti thread 방식이라면 위와 같은 singleton pattern은 안전하지 않다.</li>
</ul>

<h1 id="thread-safe-initalization">Thread Safe Initalization</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ThreadSafeInitalization</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ThreadSafeInitalization</span> <span class="n">instance</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nf">ThreadSafeInitalization</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ThreadSafeInitalization</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadSafeInitalization</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"It's print() method in ThreadSafeInitalization instance."</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"instance hashCode &gt; "</span> <span class="o">+</span> <span class="n">instance</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>muilit thread문제를 해결하기 위해 synchronized(동기화)를 사용하여 singleton pattern을 구현했다.</li>
  <li>수 많은 thread 들이 getInstance() method 를 호출하게 되면 높은 cost 비용으로 인해 프로그램 전반에 성능저하가 일어난다.</li>
</ul>

<h1 id="initialization-on-demand-holder-idiom">Initialization On Demand Holder Idiom</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">InitializationOnDemandHolderIdiom</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nf">InitializationOnDemandHolderIdiom</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">InitializationOnDemandHolderIdiom</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InitializationOnDemandHolderIdiom</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">InitializationOnDemandHolderIdiom</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"create instance"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">Singleton</span><span class="o">.</span><span class="na">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"InitializationOnDemandHolderIdiom"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>jvm 의 class loader의 매커니즘과 class의 load 시점을 이용하여 내부 class를 생성시킴으로 thread 간의 동기화 문제를 해결한다.</li>
  <li>initialization on demand holder idiom 역시 lazy initialization이 가능하며 모든 java 버젼과, jvm에서 사용이 가능하다.</li>
  <li>java 에서 singleton 을 생성시킨다고 하면 거의 위의 방법을 사용한다고 보면 된다.</li>
</ul>

<h1 id="enum-initialization">Enum Initialization</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="n">EnumInitialization</span> <span class="o">{</span>
    <span class="n">INSTANCE</span><span class="o">;</span>
    <span class="kd">static</span> <span class="n">String</span> <span class="n">test</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumInitialization</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">test</span> <span class="o">=</span> <span class="s">"test"</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>INSTANCE 가 생성될 때, multi thread 로 부터 안전하다. (추가된 methed 들은 safed 하지 않을 수도 있다.)</li>
  <li>단 한번의 인스턴스 생성을 보장한다.</li>
  <li>사용이 간편하다.</li>
  <li>enum value는 자바 프로그램 전역에서 접근이 가능하다.</li>
</ul>

<h1 id="using-reflection-to-destroy-singleton">Using Reflection To Destroy Singleton</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">UsingReflectionToDestroySingleton</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">EagerInitialization</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">EagerInitialization</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="n">EagerInitialization</span> <span class="n">instance2</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Constructor</span><span class="o">[]</span> <span class="n">constructors</span> <span class="o">=</span> <span class="n">EagerInitialization</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredConstructors</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Constructor</span> <span class="n">constructor</span> <span class="o">:</span> <span class="n">constructors</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">constructor</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
                <span class="n">instance2</span> <span class="o">=</span> <span class="o">(</span><span class="n">EagerInitialization</span><span class="o">)</span> <span class="n">constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

        <span class="o">}</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">instance</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">instance2</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>위의 코드를 실행해보면 아래 System.out.println();의 두 라인에서 찍히는 hachCode()값이 다른 것을 확인 할 수 있다.</li>
  <li>java의 reflection은 매우 강력하다. 설령 class 의 생성자가 private 일지라도 강제로 가져와서 새로운 인스턴스 생성이 가능하다.</li>
  <li>결국 singleton pattern을 깨뜨리는 것이다. 이 외에도 reflection을 여러곳에서 사용할 수 있으니 알아두는 것이 좋다.</li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li>https://blog.seotory.com/post/2016/03/java-singleton-pattern</li>
</ul>
]]></content>
      <categories>
        
          <category> Pattern </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] toString는 항상 재정의하라]]></title>
      <url>/effective%20java/2017/12/04/tostring-override/</url>
      <content type="html"><![CDATA[<h1 id="tostring-메소드">toString() 메소드</h1>
<p>java.lang.Object 클래스가 toString를 메소드를 제공한다. 이 메소드의 반환값은 클래스이름 다음에 @을 붙이고 다음에 16진수로 표시된 해시 코드가 반환된다. 이 값은 사용자에게 유용한 정보를 제공하지 않는다. toString를 재정의 해서 사용자들이 알아볼 수 있도록 해야한다.</p>

<h1 id="왜-어디에-사용되길래">왜? 어디에 사용되길래</h1>
<p>toString 메소드는 println, printf, 문자열 연결 연산자, assert, 디버거 등에 객체가 전달되면 자동으로 호출된다. 그리고 여러 프로그래머들은 해당하는 클래스에 대한 정보를 toString를 사용해 정보를 얻으려고 할것이다. 그래서 우리는 toString 메소드를 적절하게 구현해야한다.</p>

<h1 id="어떻게">어떻게?</h1>
<p>객체내에 중요한 정보를 모두 담아 반환해야한다. 만약 전화번호를 담당하는 클래스면 해당 국가 번호, 전화번호, 지역번호등 중요한 정보는 모두 담겨야한다. 그리고 해당클래스에 주석으로 어떠한 값이 반환되는지 적어두면 다른 사용자가 알아보기가 더 쉽다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] equals를 재정의할 때는 반드시 hashCode도 재정의하라]]></title>
      <url>/effective%20java/2017/12/01/hashcode-override/</url>
      <content type="html"><![CDATA[<h1 id="equals를-재정의할-때는-반드시-hashcode도-재정의하라">equals를 재정의할 때는 반드시 hashCode도 재정의하라</h1>
<p>equals 메소드가 같은 객체라는 것을 확인하더라고 hashCode가 다르면 hash로 만들어진 다른 자료구조에서 null이라는 값을 보낸다. 이처럼 hashCode를 재정의 하지 않음으로서 많은 오류가 생길 수 있다.</p>

<h1 id="문제점">문제점</h1>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashCodeOverride</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
        <span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="n">PhoneNumber</span><span class="o">(</span><span class="mi">707</span><span class="o">,</span> <span class="mi">867</span><span class="o">,</span> <span class="mi">5309</span><span class="o">),</span> <span class="s">"Jenny"</span><span class="o">);</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="k">new</span> <span class="n">PhoneNumber</span><span class="o">(</span><span class="mi">707</span><span class="o">,</span> <span class="mi">867</span><span class="o">,</span> <span class="mi">5309</span><span class="o">)));</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">short</span> <span class="n">areaCode</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">short</span> <span class="n">prefix</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">short</span> <span class="n">lineNumber</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PhoneNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">areaCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prefix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineNumber</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">rangeCheck</span><span class="o">(</span><span class="n">areaCode</span><span class="o">,</span> <span class="mi">999</span><span class="o">,</span> <span class="s">"area code"</span><span class="o">);</span>
        <span class="n">rangeCheck</span><span class="o">(</span><span class="n">prefix</span><span class="o">,</span> <span class="mi">999</span><span class="o">,</span> <span class="s">"prefix"</span><span class="o">);</span>
        <span class="n">rangeCheck</span><span class="o">(</span><span class="n">lineNumber</span><span class="o">,</span> <span class="mi">9999</span><span class="o">,</span> <span class="s">"lineNumber"</span><span class="o">);</span>

        <span class="k">this</span><span class="o">.</span><span class="na">areaCode</span> <span class="o">=</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span> <span class="n">areaCode</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">prefix</span> <span class="o">=</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span> <span class="n">prefix</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lineNumber</span> <span class="o">=</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span> <span class="n">lineNumber</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">rangeCheck</span><span class="o">(</span><span class="kt">int</span> <span class="n">arg</span><span class="o">,</span> <span class="kt">int</span> <span class="n">max</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">arg</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">arg</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">arg</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">PhoneNumber</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">PhoneNumber</span> <span class="n">pn</span> <span class="o">=</span> <span class="o">(</span><span class="n">PhoneNumber</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">pn</span><span class="o">.</span><span class="na">lineNumber</span> <span class="o">==</span> <span class="n">lineNumber</span> <span class="o">&amp;&amp;</span> <span class="n">pn</span><span class="o">.</span><span class="na">prefix</span> <span class="o">==</span> <span class="n">prefix</span> <span class="o">&amp;&amp;</span> <span class="n">pn</span><span class="o">.</span><span class="na">areaCode</span> <span class="o">==</span> <span class="n">areaCode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">17</span><span class="o">;</span>
        <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">areaCode</span><span class="o">;</span>
        <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">prefix</span><span class="o">;</span>
        <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">lineNumber</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>여기서 사용한 PhoneNumber 객체는 두가지 이다. 하나는 put 메소드에 사용하고 다른 하나는 get 함수에 사용했다. hashCode가 재정의가 안되어 있으면 논리적으로 같은 객체라 하더라도 null값을 반환할것이다. 그렇기 때문에 hashCode를 꼭 재정의 해야한다.</p>

<h1 id="어떻게-오버라이딩을-해야할까">어떻게 오버라이딩을 해야할까?</h1>
<p>hashCode를 완벽하게 재정의 하는 법은 없다. 없다기 보다는 아직까지 확실한 연구결과가 나오지 않았다. 그렇기 때문에 제곱법이나 제산법, 폴딩법등이 있다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] equals를 재정의할 때는 일반 규약을 따르라]]></title>
      <url>/effective%20java/2017/11/30/equals-override/</url>
      <content type="html"><![CDATA[<h1 id="equals를-재정의할-때는-일반-규약을-따르라">equals를 재정의할 때는 일반 규약을 따르라</h1>
<p>equals 메서드는 재정의하기 쉬워 보이지만 실수할 여지가 많고 이로인한 결과는 끔찍하다. 이런 문제는 equals를 재정의 하지않는것도 방법이긴 하지만 이 경우에는 오직 자기 자신하고만 같은객체가 된다. 다음과 같은 경우에는 그래도 된다.</p>

<ol>
  <li>각각의 객체가 고유하다.
 값 대신 활성 개체를 나타내는 thread 같은 클래스가 이 조건에 부합한다. 이런 클래스는 object 의 equals 메서드를 그대로 사용해도 된다.</li>
  <li>클래스에 “논리적 동일성” 검사 방법이 있건 없건 상관없다.
 같은 난수열을 만드는지 검사하는 equals 메서드를 재정의 할 수도 있었지만 클라이언트가 그런 기능을 원할거라 생각하지 않아서 만들지 않았다.</li>
  <li>상위 클래스에서 재정의한 equals가 하위 클래스에서 사용하기에도 적당하다.
 예를들어 set, map, list 클래스는 상위 클래스의 equals를 그대로 사용한다.</li>
  <li>클래스가 private 또는 package-private로 선언되었고, equals메서드를 호출할 일이 없다.
 이런 경우에도 equals를 재정의 하는게 맞다. 실수로도 호출할 수 있기 때문이다.</li>
</ol>

<h1 id="그렇다면-바람직한-재정의는">그렇다면 바람직한 재정의는?</h1>
<p>객체 동일성이 아닌 논리적 동일성의 개념을 지원하는 클래스일 때, 그리고 상위 클래스의 equals가 하위 클래스의 필요를 충족하지 못할 때 재정의해야 한다. equals 메서드를 정의할 때 준수해야 하는 일반 규약은 다음과 같다.</p>

<ol>
  <li>반사성
 null이 아닌 참조 x가 있을 때, x.equals(x)는 true를 반환한다.</li>
  <li>대칭성
 null이 아닌 참조 x와 y가 있을 때. x.equals(y)는 y.equals(x)가 true일 때만 true를 반환한다.</li>
  <li>추이성
 null이 아닌 참조 x, y, z가 있을 때, x.equals(y)가 true이고 y.equals(z)가 ture이면 x.equals(z)도 true이다.</li>
  <li>일관성
 null이 아닌 참조 x와 y가 있을 때, equals를 통해 비교되는 정보에 아무 변화가 없다면, x.equals(y) 호출 결과는 호출 횟수에 상관없이 항상 같아야 한다.</li>
  <li>null이 아닌 참조 x에 대해서, x.equals(null)은 항상 false이다.</li>
</ol>

<p>이것을 동치 관계라고 하는대 사소한 것이지만 이것을 지키지 않아서 나오는 손해는 엄청날 것이다. 그래서 이러한 규칙들을 가지고 equals 메서드를 구현하기 위해 따라야 할 지침들은 다음과 같다.</p>

<ol>
  <li>== 연산자를 사용하여 equals의 인자가 자기 자신인지 검사하라.</li>
  <li>instanceof 연산자를 사용하여 인자의 자료형이 정확한지 검사하라.</li>
  <li>equals의 인자를 정확한 자료형으로 변환하라.</li>
  <li>“중요” 필드 각각이 인자로 주어진 객체의 해당 필드와 일치하는지 검사한다.</li>
  <li>equals 메서드 구현을 끝냈다면, 대칭성, 추이성, 일관성의 세속이 만족되는지 검토하라.</li>
</ol>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] 종료자 사용을 피하라]]></title>
      <url>/effective%20java/2017/10/03/not-use-finalizer/</url>
      <content type="html"><![CDATA[<h1 id="종료자finalizer은-불필요하다">종료자(finalizer)은 불필요하다</h1>
<p>C나 C++ 사용자라면 소멸자를 많이들 사용한다. 다 사용한 자원들을 반환하기 위해서 사용하는데 java에서는 종료자(finalizer)의 사용을 피하는 것이 좋다. 종료자를 사용하면 시스템 오류, 성능 오류, 이식성 문제가 발생할 가능성이 크다. 또 종료자를 사용하면 프로그램의 성능이 급격하게 떨어진다. JVM은 모든 참조가 사라지기 전까지 종료자의 실행을 미루기 때문이다. 그래서 긴급하게 종료가 필요한 것을 종료자 안에 두면 언제 종료될지 모른다.</p>

<h1 id="그럼-어떻게">그럼 어떻게?</h1>
<p>종료자 대신에 명시적인 종료 메소드를 추가하면 된다. 한 가지 명심해야할 점은 유효하지 않은 객체임을 표시하는 private 필드를 하나두고 맨 앞에서 유효한지 아닌지 검사한다. 이런 명시적인 종료 메소드는 try-finally문과 함께 쓰인다. 객체 종료를 보장하기 위해서이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Foo</span> <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="o">(...);</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="c1">// foo로 해야 하는 작업 수행</span>
<span class="o">}</span> <span class="n">fanally</span> <span class="o">{</span>
    <span class="n">foo</span><span class="o">.</span><span class="na">terminate</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="정말-종료자는-불필요한가">정말 종료자는 불필요한가?</h1>
<p>적당한 곳이 두 군데 있긴하다. 종료 메소드의 호출을 잊었을 경우에 종료자안에 넣어둔다. 종료자는 그런 자원을 발견하게 될 경우 반드시 경고 메시지를 로그로 남겨야 한다. 네이티브 피어(native peer)와 연결된 객체를 다룰 때다. 네이티브 피어는 일반 자바 객체가 네이티브 메서드를 통해 기능 수행을 위임하는 네이티브 객체를 말한다. 네이티브 피어는 일반 객체가 아니므로, 쓰레기 수집기가 알 수 없을 뿐더러 자바 측 피어 객체가 반환될 때 같이 반환할 수도 없다.</p>

<h1 id="주의할-점">주의할 점</h1>
<p>종료자 연결이 자동으로 이루어지지 않는다. 상속으로 클래스를 구현할 경우 하위 클래스의 종료자는 상위 클래스의 종료자를 명시적으로 호출해야 한다. 이때 하위 클래스의 상태는 try 블록 안에서 종료시켜야 하고, 상위 클래스 종료자는 finally블록 안에서 호출해야 한다. 하위 클래스에서 상위 클래스 종료자를 재정의 하면서 상위 클래스 종료자 호출을 잊으면 상위 클래스 종료자는 절대로 호출되지 않는다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] 유효기간이 지난 객체는 폐기 하라]]></title>
      <url>/effective%20java/2017/10/03/object-reference/</url>
      <content type="html"><![CDATA[<h1 id="유효기간이-지난-객체는-폐기-하라">유효기간이 지난 객체는 폐기 하라</h1>
<p>메모리를 손수 관리 해주는 C와 C++을 쓰다가 쓰레기 수집기가 있는 언어를 사용하게 되면 정말 편해진다. 편해짐에 따라 메모리 관리를 하지 않아도 쓰레기 수집기가 알아서 해준다는 생각은 하면 안된다. Stack 클래스를 예로 들어보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyStack</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">MyStack</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">DEFAULT_INITAL_CAPACITY</span><span class="o">];</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">Object</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ensureCapacity</span><span class="o">();</span>
        <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">++]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">EmptyStackException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">elements</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 적어도 하나 이상의 원소를 담을 공간을 보장한다.
     * 배열의 길이를 늘려야 할 때마다 대략 두 배씩 늘인다.
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">ensureCapacity</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">elements</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>뚜렷하게 보이는 오류는 없지만 메모리 누수(memory leak)문제가 있다. 그래서 쓰레기 수집기가 해야할 일이 늘어나 성능이 저하되거나, 메모리 요구향이 증가할 것이다. 극단적인 경우에는 디스크 페이징(disk paging)이 발생하고 심지어는 OutOfMemoryError가 던져지면서 프로그램이 중단될 것이다. 그렇다면 저기서 메모리 누수는 어디서 생길까? pop하는 부분에서 스택이 줄어들면서 제거한 객체들을 쓰레기 수집기가 처리하지 못해서 생긴다. 스택이 그런 객체에 대한 만기 참조(obsolete reference)를 제거하지 않기 때문이다. 이런 문제는 간단히 고칠 수 있다. 쓸 일 없는 객체 참조는 무조건 null로 만드는 것이다. Stack클래스의 경우, 스택에서 pop된 객체에 대한 참조는 그 즉시 null로 만들면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">Object</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">EmptyStackException</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">Object</span> <span class="n">results</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
    <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">results</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>만기 참조를 null로 만들면 나중에 실수로 그 참조를 사용하더라도 NullPointerException이 발생하기 때문에 프로그램은 오동작하는 대신 바로 종료된다는 장점이 있다. 프로그램의 오류는 최대한 빨리 알아내는 것이 좋다. 이런 오류를 몇 번 접하고 나면 객체 사용이 끝나면 즉시 그 참조를 null로 만들어야 한다는 강박관념에 사로잡히는 경우가 있다. 하지만 그럴필요도 없고 바람직하지도 않다. 객체 참조를 null 처리하는 것은 규범(norm)이라기보단 예외적인 조치가 되어야 한다. 만기 참조를 제거하는 가장 좋은 방법은 해당 잠조가 보관된 변수가 유효범위(scope)를 벗어나게 두는 것이다. 변수를 정의할 때 그 유효범위를 최대한 좁게 만들면 자연 스럽게 해결된다.</p>

<p>메모리 누수가 흔히 발생하는 곳은 캐시(chche)나 리스너(listener)등 이다. 메모리 누수가 보통 뚜렷한 오류로 이어지지 않고 눈에도 잘 안띄기 때문에 코딩할 때 각별한 주의가 필요하다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] 불필요한 객체는 만들지 말라]]></title>
      <url>/effective%20java/2017/09/27/unnecessary-object/</url>
      <content type="html"><![CDATA[<h1 id="불필요한-객체는-만들지-말라">불필요한 객체는 만들지 말라</h1>
<p>기능적으로 객체를 새로 만드는 것보다 재사용하는 편이 훨씬 빠르다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">"Hello, World"</span><span class="o">);</span>
</code></pre></div></div>
<p>이런식으로 객체를 만들면 호출 될 때마다 항상 새로운 객체가 만들어지기 때문에 이러한 방법은 피하는 편이 좋고 아래와 같은 방법을 쓰는것이 좋다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"Hello, World"</span><span class="o">;</span>
</code></pre></div></div>

<p>실제로 다음과 같은 코드를 실행시키면 다음과 같은 결과를 얻는다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImmutableObject</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">"Hello, World"</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">"Hello, World"</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">c</span> <span class="o">=</span> <span class="s">"Hello, World"</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">d</span> <span class="o">=</span> <span class="s">"Hello, World"</span><span class="o">;</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">d</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/_img/effectivejava/string_address.png" alt="" /></p>

<p>변경 불가능한 객체인 경우 정적 팩토리 메소드를 사용하면 새로운 객체를 만들지 않는다. 변경 가능한 객체도 재사용할 수 있다. 단, 변경하지 않는다면 말이다. 다음의 예를 보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Date</span> <span class="n">birthDate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBabyBoomer</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Calendar</span> <span class="n">gmtCal</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">TimeZone</span><span class="o">.</span><span class="na">getTimeZone</span><span class="o">(</span><span class="s">"GMT"</span><span class="o">));</span>

        <span class="n">gmtCal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">1946</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">JANUARY</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="n">Date</span> <span class="n">boomStart</span> <span class="o">=</span> <span class="n">gmtCal</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>
        <span class="n">gmtCal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">1965</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">JANUARY</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="n">Date</span> <span class="n">boomEnd</span> <span class="o">=</span> <span class="n">gmtCal</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">birthDate</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">boomStart</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">birthDate</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">boomEnd</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 만들면 해당 메소드를 호출될 때마다 Calendar 객체 하나, TimeZone 객체 하나, 그리고 Date 객체 두 개를 쓸데없이 만들어 낸다. 이렇게 비효율적인 코드는 정적 초기화 블록(static initializer)을 통해 개선하는 것이 좋다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Date</span> <span class="n">birthDate</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Date</span> <span class="n">BOOM_START</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Date</span> <span class="n">BOOM_END</span><span class="o">;</span>
    
    <span class="kd">static</span> <span class="o">{</span>
        <span class="n">Calendar</span> <span class="n">gmtCal</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">TimeZone</span><span class="o">.</span><span class="na">getTimeZone</span><span class="o">(</span><span class="s">"GMT"</span><span class="o">));</span>
        <span class="n">gmtCal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">1946</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">JANUARY</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="n">BOOM_START</span> <span class="o">=</span> <span class="n">gmtCal</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>
        <span class="n">gmtCal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">1965</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">JANUARY</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="n">BOOM_END</span> <span class="o">=</span> <span class="n">gmtCal</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBabyBoomer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">birthDate</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">BOOM_START</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">birthDate</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">BOOM_END</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 클래스는 클래스가 초기화 될 때 한 번만 만든다. 그리고 BOOM_START와 BOOM_END가 한번만 초기화 되는 상수라는 사실도 알수있다. 또 객체 자료형보다 기본 자료형을 사용하는 것이 좋다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Integer</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
<span class="c1">// Integer i = new Integer(3);</span>
</code></pre></div></div>
<p>auto-boxing이 되면서 불필요한 객체를 만들기 때문이다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] 객체 생성을 막을 때는 private 생성자를 사용하라]]></title>
      <url>/effective%20java/2017/09/24/private-constructor/</url>
      <content type="html"><![CDATA[<h1 id="객체-생성을-막을-때는-private-생성자를-사용하라">객체 생성을 막을 때는 private 생성자를 사용하라</h1>
<p>코딩을 하다 보면 상수나 배열 등을 모아둔 유틸리티 클래스를 만들 때도 있다. 이러한 클래스들은 객체가 생성되면 안된다. 생성자를 만들지 않으면 컴파일러가 public 생성자를 넣기 때문에 안되고 abstract로 만들면 이 클래스를 상속받는 하위 클래스들을 사용해서 객체를 만들 수 있기 때문에 안된다. 그래서 private 생성자를 두어 객체 생성을 막는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrivateConstructor</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nf">PrivateConstructor</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AssertionError</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라]]></title>
      <url>/effective%20java/2017/09/23/private-enum-singleton-pattern/</url>
      <content type="html"><![CDATA[<h1 id="private-생성자나-enum-자료형은-싱글턴-패턴을-따르도록-설계하라">private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라</h1>
<p>싱글턴 패턴은 객체를 하나만 만들 수 있는 클래스이다. 창 관리자나 파일 시스템같은 것들이 그 예이다. 하지만 AccessibleObject.setAccessible 메소드의 도움을 받아 권한을 획득한 클라이언트는 리플렉션 기능을 통해 private 생성자를 다시 호출할 수 있다. 이러한 공격을 방어하려면 두 번째 객체를 생성하라는 요철을 받으면 예욀르 던지도록 생성자를 고쳐야 한다. 또 다른 방법은 public으로 선언된 정적 팩토리 메소드를 이용한다. 정적 팩토리 메소드를 이용해서 첫 번째 방법으로 공격하면 막지 못한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Book</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Book</span><span class="o">();</span>

    <span class="kd">private</span> <span class="nf">Book</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Book</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>싱글턴 클래스를 직렬화 가능 클래스로 만들려면 클래스 선언에 implements Serializable을 추가하는 것으로는 부족하다. 모든 필드를 transient로 선언하고 readResolve 메소드를 추가해야한다. 그렇지 않으면 serialize된 객체가 역직화 될 때마다 새로운 객체가 생기게 된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 싱글턴 상태를 유지하기 위한 readResolve 구현</span>
<span class="kd">private</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
	<span class="c1">// 동일한 Book 객체가 반환되도록 하는 동시에, 가짜 Book 객체는</span>
    <span class="c1">// 쓰레기 수집기가 처리하도록 만든다.</span>
	<span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>jdk 1.5부터는 싱글턴을 구현할 때 새로운 방법을 사용할 수 있다. 원소가 하나뿐인 enum자료형을 정의하는 것이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Book</span> <span class="o">{</span>
	<span class="n">INSTANCE</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readBook</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 만들면 직렬화가 자동으로 처리된다는 것이다. 여러 객체가 생길일이 없고 리플렉션을 통한 공격에도 안전하다. 원소가 하나뿐인 enum 자료형이야말로 싱글턴을 구현하는 가장 좋은 방법이다. 클래스를 싱글턴으로 만들면 클라이언트를 테스트하기가 어려워질 수가 있다. 싱글턴이 어떤 인터페이스를 구현하는 것이 아니면 가짜 구현으로 대체할 수 없기 때문이다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Android] Retrofit 사용법]]></title>
      <url>/android/2017/09/22/use-retrofit/</url>
      <content type="html"><![CDATA[<h1 id="android-retrofit-사용법">Android Retrofit 사용법</h1>
<p>Retrofit은 Square Open Source에서 만든 REST API 통신을 위한 안드로이드 라이브러리이다. 안드로이드 서비스를 개발하려면 서버와의 통신은 꼭 필요합니다. 다른 라이브러리를 사용하면 불필요하고 귀찮은 작업이 많습니다. Retrofit은 불필요한 작업을 최소화 하고 쓰기 쉽게 만들어진 라이브러리입니다.</p>

<p>먼저 gradle을 추가합니다.</p>
<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">compile</span> <span class="s1">'io.reactivex.rxjava2:rxandroid:2.0.1'</span>
<span class="n">compile</span> <span class="s1">'io.reactivex.rxjava2:rxjava:2.1.3'</span>
<span class="n">compile</span> <span class="s1">'com.squareup.retrofit2:retrofit:2.3.0'</span>
<span class="n">compile</span> <span class="s1">'com.google.code.gson:gson:2.7'</span>
<span class="n">compile</span> <span class="s1">'com.android.support:recyclerview-v7:25.1.0'</span>
<span class="n">compile</span> <span class="s1">'com.squareup.retrofit2:converter-gson:2.1.0'</span>
<span class="n">compile</span> <span class="s1">'com.squareup.picasso:picasso:2.5.2'</span>
</code></pre></div></div>

<p>간단하게 파싱할 https://randomuser.me/api의 데이터입니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">results</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="err">gender</span><span class="p">:</span><span class="w"> </span><span class="s2">"male"</span><span class="p">,</span><span class="w">
            </span><span class="err">name</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="err">title</span><span class="p">:</span><span class="w"> </span><span class="s2">"mr"</span><span class="p">,</span><span class="w">
                </span><span class="err">first</span><span class="p">:</span><span class="w"> </span><span class="s2">"jimi"</span><span class="p">,</span><span class="w">
                </span><span class="err">last</span><span class="p">:</span><span class="w"> </span><span class="s2">"polon"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">location</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="err">street</span><span class="p">:</span><span class="w"> </span><span class="s2">"9350 itsenäisyydenkatu"</span><span class="p">,</span><span class="w">
                </span><span class="err">city</span><span class="p">:</span><span class="w"> </span><span class="s2">"kristinestad"</span><span class="p">,</span><span class="w">
                </span><span class="err">state</span><span class="p">:</span><span class="w"> </span><span class="s2">"south karelia"</span><span class="p">,</span><span class="w">
                </span><span class="err">postcode</span><span class="p">:</span><span class="w"> </span><span class="mi">14156</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">email</span><span class="p">:</span><span class="w"> </span><span class="s2">"jimi.polon@example.com"</span><span class="p">,</span><span class="w">
            </span><span class="err">login</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="err">username</span><span class="p">:</span><span class="w"> </span><span class="s2">"blackdog726"</span><span class="p">,</span><span class="w">
                </span><span class="err">password</span><span class="p">:</span><span class="w"> </span><span class="s2">"ranger"</span><span class="p">,</span><span class="w">
                </span><span class="err">salt</span><span class="p">:</span><span class="w"> </span><span class="s2">"cFE2HMuR"</span><span class="p">,</span><span class="w">
                </span><span class="err">md</span><span class="mi">5</span><span class="p">:</span><span class="w"> </span><span class="s2">"c7caf7af79bc56b4ddeee96bb9f90d85"</span><span class="p">,</span><span class="w">
                </span><span class="err">sha</span><span class="mi">1</span><span class="p">:</span><span class="w"> </span><span class="s2">"c2a0382305915dc106e2b75a48b2f454aef4f334"</span><span class="p">,</span><span class="w">
                </span><span class="err">sha</span><span class="mi">256</span><span class="p">:</span><span class="w"> </span><span class="s2">"ff6fbdd32246bd365b3a095c91408503a1f73620526e4f24da4759f439427096"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">dob</span><span class="p">:</span><span class="w"> </span><span class="s2">"1967-10-03 16:02:57"</span><span class="p">,</span><span class="w">
            </span><span class="err">registered</span><span class="p">:</span><span class="w"> </span><span class="s2">"2009-07-19 00:26:27"</span><span class="p">,</span><span class="w">
            </span><span class="err">phone</span><span class="p">:</span><span class="w"> </span><span class="s2">"02-657-116"</span><span class="p">,</span><span class="w">
            </span><span class="err">cell</span><span class="p">:</span><span class="w"> </span><span class="s2">"042-656-81-18"</span><span class="p">,</span><span class="w">
            </span><span class="err">id</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="err">name</span><span class="p">:</span><span class="w"> </span><span class="s2">"HETU"</span><span class="p">,</span><span class="w">
                </span><span class="err">value</span><span class="p">:</span><span class="w"> </span><span class="s2">"1167-163D"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">picture</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="err">large</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://randomuser.me/api/portraits/men/76.jpg"</span><span class="p">,</span><span class="w">
                </span><span class="err">medium</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://randomuser.me/api/portraits/med/men/76.jpg"</span><span class="p">,</span><span class="w">
                </span><span class="err">thumbnail</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://randomuser.me/api/portraits/thumb/men/76.jpg"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">nat</span><span class="p">:</span><span class="w"> </span><span class="s2">"FI"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="err">...</span><span class="w">
    </span><span class="err">info</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">seed</span><span class="p">:</span><span class="w"> </span><span class="s2">"468e4162245cdf64"</span><span class="p">,</span><span class="w">
    </span><span class="err">results</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="err">page</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="err">version</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.1"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>일단 데이터를 얻어오기 위해 interface를 정의합니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">APIInterface</span> <span class="o">{</span>
    <span class="nd">@GET</span><span class="o">(</span><span class="s">"/api/"</span><span class="o">)</span>
    <span class="n">Call</span><span class="o">&lt;</span><span class="n">PersonModel</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="nd">@Query</span><span class="o">(</span><span class="s">"results"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">results</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>실제로 요청하는 url은 https://randomuser.me/api/?results=1 입니다. 여기 result에 따라 몇 개의 데이터를 얻어올지 결정합니다.
그리고 인터페이스에 있는 메소드의 인자들은 url에 있는 ? 뒤에 query를 설명합니다.</p>

<p>model도 적절하게 생성합니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Name</span> <span class="o">{</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"title"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"first"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">first</span><span class="o">;</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"last"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">last</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirst</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">first</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFirst</span><span class="o">(</span><span class="n">String</span> <span class="n">first</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLast</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">last</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLast</span><span class="o">(</span><span class="n">String</span> <span class="n">last</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">last</span> <span class="o">=</span> <span class="n">last</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">UserProfileImage</span> <span class="o">{</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"large"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">large</span><span class="o">;</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"medium"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">medium</span><span class="o">;</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"thumbnail"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">thumbnail</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLarge</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">large</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLarge</span><span class="o">(</span><span class="n">String</span> <span class="n">large</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">large</span> <span class="o">=</span> <span class="n">large</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMedium</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">medium</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMedium</span><span class="o">(</span><span class="n">String</span> <span class="n">medium</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">medium</span> <span class="o">=</span> <span class="n">medium</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getThumbnail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">thumbnail</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setThumbnail</span><span class="o">(</span><span class="n">String</span> <span class="n">thumbnail</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">thumbnail</span> <span class="o">=</span> <span class="n">thumbnail</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Item</span> <span class="o">{</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"name"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">Name</span> <span class="n">name</span><span class="o">;</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"picture"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">UserProfileImage</span> <span class="n">userProfileImage</span><span class="o">;</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"gender"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">gender</span><span class="o">;</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"phone"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">phone</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGender</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">gender</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPhone</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPhone</span><span class="o">(</span><span class="n">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phone</span> <span class="o">=</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Name</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">Name</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">UserProfileImage</span> <span class="nf">getUserProfileImage</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userProfileImage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserProfileImage</span><span class="o">(</span><span class="n">UserProfileImage</span> <span class="n">userProfileImage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userProfileImage</span> <span class="o">=</span> <span class="n">userProfileImage</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonModel</span> <span class="o">{</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"results"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="n">items</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="nd">@SerializedName</span><span class="o">(</span><span class="s">"page"</span><span class="o">)</span>
    <span class="nd">@Expose</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">page</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="nf">getItems</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">items</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setItems</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">items</span> <span class="o">=</span> <span class="n">items</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPage</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">page</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPage</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">page</span> <span class="o">=</span> <span class="n">page</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>또 결과를 보여줄 recyclerview도 만듭니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">ItemClickListener</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">onItemClick</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RecyclerAdapter</span> <span class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span><span class="o">&lt;</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ItemClickListener</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Context</span> <span class="n">context</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">RecyclerAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">items</span> <span class="o">=</span> <span class="n">items</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getItemTitle</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">items</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">).</span><span class="na">getName</span><span class="o">().</span><span class="na">getFirst</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemClick</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">getItemTitle</span><span class="o">(</span><span class="n">position</span><span class="o">),</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="nf">onCreateViewHolder</span><span class="o">(</span><span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">viewType</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="n">View</span> <span class="n">v</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">getContext</span><span class="o">()).</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">list_item</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UsersViewHolder</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">holder</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBindViewHolder</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="n">holder</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">holder</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="o">((</span><span class="n">UsersViewHolder</span><span class="o">)</span> <span class="n">holder</span><span class="o">).</span><span class="na">name</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">items</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">).</span><span class="na">getName</span><span class="o">().</span><span class="na">getFirst</span><span class="o">());</span>
        <span class="n">Picasso</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">items</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">).</span><span class="na">getUserProfileImage</span><span class="o">().</span><span class="na">getThumbnail</span><span class="o">()).</span><span class="na">into</span><span class="o">(((</span><span class="n">UsersViewHolder</span><span class="o">)</span> <span class="n">holder</span><span class="o">).</span><span class="na">profileImg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getItemCount</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">items</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">UsersViewHolder</span> <span class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">TextView</span> <span class="n">name</span><span class="o">;</span>
        <span class="kd">private</span> <span class="n">ImageView</span> <span class="n">profileImg</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">UsersViewHolder</span><span class="o">(</span><span class="n">View</span> <span class="n">itemView</span><span class="o">,</span> <span class="kd">final</span> <span class="n">ItemClickListener</span> <span class="n">itemClickListener</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">itemView</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">profileImg</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">userImg</span><span class="o">);</span>

            <span class="n">itemView</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">itemClickListener</span><span class="o">.</span><span class="na">onItemClick</span><span class="o">(</span><span class="n">getAdapterPosition</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">});</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>마지막으로 retrofit을 만듭니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Retrofit</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Retrofit</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">baseUrl</span><span class="o">(</span><span class="s">"https://randomuser.me"</span><span class="o">).</span><span class="na">addConverterFactory</span><span class="o">(</span><span class="n">GsonConverterFactory</span><span class="o">.</span><span class="na">create</span><span class="o">()).</span><span class="na">build</span><span class="o">();</span>
<span class="n">APIInterface</span> <span class="n">service</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">APIInterface</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">Call</span><span class="o">&lt;</span><span class="n">PersonModel</span><span class="o">&gt;</span> <span class="n">call</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">call</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">PersonModel</span><span class="o">&gt;()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResponse</span><span class="o">(</span><span class="n">Call</span><span class="o">&lt;</span><span class="n">PersonModel</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="n">Response</span><span class="o">&lt;</span><span class="n">PersonModel</span><span class="o">&gt;</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">isSuccessful</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">"Success"</span><span class="o">,</span> <span class="n">response</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="n">PersonModel</span> <span class="n">person</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">();</span>
            <span class="n">recyclerView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="k">new</span> <span class="n">RecyclerAdapter</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">getItems</span><span class="o">()));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="n">Call</span><span class="o">&lt;</span><span class="n">PersonModel</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">"Failed"</span><span class="o">,</span> <span class="s">"Failed Connection"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Android </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] Builder Pattern]]></title>
      <url>/effective%20java/2017/09/14/builder-pattern/</url>
      <content type="html"><![CDATA[<h1 id="builder-pattern">Builder Pattern</h1>
<p>정적 팩토리 메소드나 생성자는 같은 문제를 가지고 있다. 선택적 인자가 많은 상황에 잘 적응하지 못한다는 것이다. 이럴때에 점층적 생성자 패턴을 적용하기는 하지만 필요없는 인자를 넣어 줘야 할 때도 있고 클라이언트 코드를 작성하기도 어려워진다. 그리고 가독성도 많이 떨어진다. 다른 방법으로 자바빈 패턴이있다. 일단 객체를 생성한 뒤에 세터를 사용해 객체에 값을 넣어주는 방법이다. 하지만 객체를 만들면서 초기화 작업을 하지 못하므로 객체의 일관성이 일시적으로 깨질 수 있다는 것이다. 빌더 패턴을 사용하면 이 문제를 해결 할 수 있다.</p>

<h2 id="code">Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
        <span class="c1">// 필수인자</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
        <span class="c1">// 선택적 인자 - 기본값으로 초기화</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">calories</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">fat</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">sodium</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">carbohydrate</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">servingSize</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">servings</span> <span class="o">=</span> <span class="n">servings</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">calories</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">calories</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">fat</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">fat</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">sodium</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sodium</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">carbohydrate</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">carbohydrate</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">NutritionFacts</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">servingSize</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servingSize</span><span class="o">;</span>
        <span class="n">servings</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servings</span><span class="o">;</span>
        <span class="n">calories</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">calories</span><span class="o">;</span>
        <span class="n">fat</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">fat</span><span class="o">;</span>
        <span class="n">sodium</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">sodium</span><span class="o">;</span>
        <span class="n">carbohydrate</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">carbohydrate</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BuilderPattern</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">NutritionFacts</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NutritionFacts</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">).</span><span class="na">calories</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p>NutritionFacts 객체는 변경이 불가능하고 모든 인자의 기본값이 한곳에 모여 있다. 그리고 빌더에 정의된 설정 매소드는 빌더 객체 자신을 반환하므로, 설정 매소드를 호출하는 코드는 쭉 이어서 쓸 수 있다. 또 작성하기도 쉽고 가독성도 뛰어나다.</p>

<h2 id="빌더-패턴-단점">빌더 패턴 단점</h2>
<p>객체를 만들려면 빌더 객체를 생성해야 한다는 것이다.  빌더 객체를 만드는 오버헤드가 문제가 안될 수 도있지만 성능이 중요한 상황에서는 고려해야한다.</p>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[[Effective Java] 정적 팩토리 메소드]]></title>
      <url>/effective%20java/2017/09/13/static-factory-method/</url>
      <content type="html"><![CDATA[<h1 id="정적-팩토리-메소드">정적 팩토리 메소드</h1>
<p>클래스를 통해 객체를 만드는 방법은 public으로 선언된 생성자를 사용하는 것이다. 또 다른 방법은 클래스의 public으로 선언된 정적 팩토리 메소드(Static Factory Method)를 사용하는 것이다. 이 메소드는 static로 선언되어 있어서 외부에서 바로 접근할 수 있다.</p>

<h2 id="정적-팩토리-메소드의-장점">정적 팩토리 메소드의 장점</h2>
<ol>
  <li>생성자와는 달리 이름이 있다.
생정자의 전달되는 인자들은 어떤 객체가 생성되는지를 설명하지 못하지만, 정적 팩토리 메소드는 이름만 잘 짓는다면 어떤 객체가 만들어 지는지 설명할 수 있다.</li>
  <li>생성자와는 달리 호출할 때마다 새로운 객체를 생성할 필요가 없다.
변경 불가능 클래스라면 이미 만들어둔 객체를 활용할 수도 있고, 만든 객체를 캐시 해놓고 재사용하여 같은 객체가 불필요하게 거듭 생성되는 일을 피할 수도 있다. 동일한 객체가 요청되는 일이 잦고, 특히 객체를 만드는 비용이 클 때 적용하면 성능을 크게 개선할 수 있다. 다음과 같은 코드가 정적 팩토리 메소드를 적용한 것이다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">static</span> <span class="n">Boolean</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">return</span> <span class="n">b</span> <span class="o">?</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TRUE</span> <span class="o">:</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">FALSE</span><span class="o">;</span>
     <span class="o">}</span>
</code></pre></div>    </div>
    <p>정적 팩토리 메소드를 사용하면 같은 객체를 반복해서 반환할 수 있으므로 어떤 시점에 어떤 객체가 얼마나 존재할지를 정밀하게 제어할 수 있다. 이런 기능을 갖춘 클래스를 개체 통제 클래스(instance-controlled class)라고 부른다. 개체 수를 제어하면 싱글톤 패턴을 따를 수 있고, 객체 생성이 불가능한 클래스를 만들 수도 있다. 변경 불가능의 클래스의 경우 두 개의 같은 객체가 존재하지 못하도록 할 수도 있다.</p>
  </li>
  <li>생성자와는 달리 반환값 자료형의 하위 자료형 객체를 반환할 수 있다는 것이다.
public으로 선언되지 않은 클래스의 객체를 반환하는 API를 만들 수 있다. 그러면 구현 세부사항을 감출 수 있으므로 아주 간결한 API가 가능하다. 인터페이스 기반 프레인워크(interface-based framework)구현에 적합한데, 이 프레임워크에서는 정적 팩토리 메소드의 반환값 자료형으로 이용된다. 인터페이스는 정적 메소드를 가질 수 없으므로, 관습상 반환값 자료형이 Type이라는 이름의 인터페이스인 정적 팩토리 메소드는 Type라는 이름의 객체 생성 불가능 클래스안에 둔다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 서비스 인터페이스</span>
 <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ServiceInterface</span> <span class="o">{</span>
     <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">);</span>
     <span class="kt">int</span> <span class="nf">mul</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">);</span>
     <span class="o">...</span> <span class="c1">// 서비스에 고유한 메소드들이 이 자리에 온다</span>
 <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServiceImplement</span> <span class="kd">implements</span> <span class="n">ServiceInterface</span> <span class="o">{</span>
     <span class="nd">@Override</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
     <span class="o">}</span>

     <span class="nd">@Override</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">mul</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">//서비스 제공자 인터페이스</span>
 <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProviderInterface</span> <span class="o">{</span>
     <span class="n">ServiceInterface</span> <span class="nf">newService</span><span class="o">();</span>
 <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProviderImplement</span> <span class="kd">implements</span> <span class="n">ProviderInterface</span> <span class="o">{</span>
     <span class="nd">@Override</span>
     <span class="kd">public</span> <span class="n">ServiceInterface</span> <span class="nf">newService</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">return</span> <span class="k">new</span> <span class="nf">ServiceImplement</span><span class="o">();</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 서비스 등록과 접근에 사용되는 객체 생성 불가능 클래스</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServiceProvider</span> <span class="o">{</span>
     <span class="kd">private</span> <span class="nf">ServiceProvider</span><span class="o">()</span> <span class="o">{}</span> <span class="c1">// 인스턴스 생성 X</span>
	
     <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ProviderInterface</span><span class="o">&gt;</span> <span class="n">providers</span> <span class="o">=</span>
         <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ProviderInterface</span><span class="o">&gt;();</span>
     <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DEFAULT_PROVIDER_NAME</span> <span class="o">=</span> <span class="s">"&lt;def&gt;"</span><span class="o">;</span>
	
     <span class="c1">// 제공자 등록 API</span>
     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">registerDefaultProvider</span><span class="o">(</span><span class="n">ProviderInterface</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">registerProvider</span><span class="o">(</span><span class="n">DEFAULT_PROVIDER_NAME</span><span class="o">,</span> <span class="n">p</span><span class="o">);</span>
     <span class="o">}</span>
	
     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">registerProvider</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">ProviderInterface</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">providers</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">p</span><span class="o">);</span>
     <span class="o">}</span>
	
     <span class="c1">// 서비스 접근 API</span>
     <span class="kd">public</span> <span class="kd">static</span> <span class="n">ServiceInterface</span> <span class="nf">newInstance</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">return</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">DEFAULT_PROVIDER_NAME</span><span class="o">);</span>
     <span class="o">}</span>
	
     <span class="kd">public</span> <span class="kd">static</span> <span class="n">ServiceInterface</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">ProviderInterface</span> <span class="n">p</span> <span class="o">=</span> <span class="n">providers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
                 <span class="s">"No provider registered with name: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">newService</span><span class="o">();</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServiceMain</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">ServiceProvider</span><span class="o">.</span><span class="na">registerDefaultProvider</span><span class="o">(</span><span class="k">new</span> <span class="n">ProviderImplement</span><span class="o">());</span>
         <span class="n">ServiceProvider</span><span class="o">.</span><span class="na">registerProvider</span><span class="o">(</span><span class="s">"BoWoon"</span><span class="o">,</span> <span class="k">new</span> <span class="n">ProviderImplement</span><span class="o">());</span>
	
         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ServiceProvider</span><span class="o">.</span><span class="na">newInstance</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>
         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ServiceProvider</span><span class="o">.</span><span class="na">newInstance</span><span class="o">().</span><span class="na">mul</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ServiceProvider</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="s">"BoWoon"</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>형인자 자료형(parameterized type) 객체를 만들 때 편하다
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</code></pre></div>    </div>
    <p>자료형 명세를 중복하면 형인자가 늘어남에 따라 길고 복잡한 코드가 만들어진다. 하지만 정적 팩토리 메소드를 사용하면 컴파일러가 형인자를 스스로 알아내도록 할 수 있다. 이런 기법을 자료형 유추(type inference)라고 부른다.</p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="nf">newInstance</span><span class="o">()</span> <span class="o">{</span>
     <span class="k">return</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;();</span>
 <span class="o">}</span>
</code></pre></div>    </div>
    <p>이런 메소드가 있으면 아까와 같은 코드를 간결하게 작성할 수 있다.</p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">Map</span> <span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="정적-팩토리-메소드의-단점">정적 팩토리 메소드의 단점</h2>
<ol>
  <li>public이나 protected로 선언된 생성자가 없으므로 하위 클래스를 만들 수 없다</li>
  <li>정적 팩토리 메소드가 다른 정적 메소드와 확연히 구분되지 않는다는 것</li>
</ol>
]]></content>
      <categories>
        
          <category> Effective Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
